//Definicion de pines de ESP32-WROOM
#define ultrasoundPin 25 // D3 Ultrasonido
#define LEDpin 26 // D2 LED NIR
#define glucoseSensor 36 // A1 Salida Sensor glucómetro

#include <WiFi.h>
#include <HTTPClient.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

const char *ssid = "WIFI2"; // Nombre de tu red WiFi
const char *password = "12345678"; // Contraseña de tu red WiFi
#define API_KEY "AIzaSyAvSMFPnP3ZOQvUe1sFN8mC0lNps-g88nM"
#define DATABASE_URL "https://glucosa-electronica-default-rtdb.firebaseio.com/"

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;

int periodo = 4;
int contadorNIR = 0;
int contadorSensor = 0;
int diferenciaMaxMin = 0;
int calcavrg = 0;
int calcmin = 0;
int calcmax = 0;
int lecturaMaxima = 0;
int lecturaMinima = 1023;
int stateLEDNIR = 0;
float voltaje;
unsigned long tiempoAnterior = 0;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conexión exitosa a WiFi");

  while (!Serial);

  pinMode(ultrasoundPin, OUTPUT);
  pinMode(LEDpin, OUTPUT);
  pinMode(glucoseSensor, INPUT);

  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;

  if (Firebase.signUp(&config, &auth, "", "")) {
    Serial.println("Autenticación exitosa");
    signupOK = true;
  } else {
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  config.token_status_callback = tokenStatusCallback;
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}
void loop() {
 tiempoAnterior=millis(); //guarda el tiempo actual como referencia
 while(millis()-tiempoAnterior<=periodo)
 { 
 digitalWrite (ultrasoundPin, LOW);
 delayMicroseconds (12.5);
 digitalWrite (ultrasoundPin, HIGH);
 delayMicroseconds (12.5);
 if(millis()-tiempoAnterior==2)
 {
 digitalWrite(ultrasoundPin, LOW);
 }
 }
  int lecturaSensor = analogRead(glucoseSensor);

  if (lecturaSensor > lecturaMaxima) {
    lecturaMaxima = lecturaSensor;
  }

  if (lecturaSensor < lecturaMinima) {
    lecturaMinima = lecturaSensor;
  }

  contadorNIR++;

  if (contadorNIR == 125) {
    contadorNIR = 0;
    if (stateLEDNIR == 0) {
      digitalWrite(LEDpin, HIGH);
      stateLEDNIR = 1;
    } else {
      digitalWrite(LEDpin, LOW);
      stateLEDNIR = 0;
      contadorSensor++;
      calcmin += lecturaMinima;
      calcmax += lecturaMaxima;

      if (contadorSensor == 3) {
        contadorSensor = 0;
        diferenciaMaxMin = lecturaMaxima - lecturaMinima;

        if (diferenciaMaxMin < 50) {
          diferenciaMaxMin = lecturaMaxima;
        }

        voltaje = (diferenciaMaxMin * 3.3) / 1023;
        calcavrg = (calcmax - calcmin) / 3;

        // Envío de datos a Firebase
        sendDataToFirebase("glucoseData/lecturaMaxima", lecturaMaxima);
        sendDataToFirebase("glucoseData/lecturaMinima", lecturaMinima);
        sendDataToFirebase("glucoseData/diferenciaMaxMin", diferenciaMaxMin);
        sendDataToFirebase("glucoseData/calcavrg", calcavrg);
        sendDataToFirebase("glucoseData/voltaje", voltaje);

        // Reiniciar valores para el próximo ciclo
        calcavrg = 0;
        calcmax = 0;
        calcmin = 0;    
        voltaje = 0;
        diferenciaMaxMin = 0;
        lecturaMaxima = 0;
        lecturaMinima = 1023;
      }
    }
  }
}

void sendDataToFirebase(const char *path, int data) {
  if (Firebase.RTDB.setInt(&fbdo, path, data)) {
    Serial.print("Enviado correctamente a ");
    Serial.print(path);
    Serial.print(": ");
    Serial.println(data);
  } else {
    Serial.print("Error al enviar a ");
    Serial.print(path);
    Serial.print(": ");
    Serial.println(fbdo.errorReason());
  }
}

void sendDataToFirebase(const char *path, float data) {
  if (Firebase.RTDB.setFloat(&fbdo, path, data)) {
    Serial.print("Enviado correctamente a ");
    Serial.print(path);
    Serial.print(": ");
    Serial.println(data);
  } else {
    Serial.print("Error al enviar a ");
    Serial.print(path);
    Serial.print(": ");
    Serial.println(fbdo.errorReason());
  }
}
